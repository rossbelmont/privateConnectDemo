AWSTemplateFormatVersion: 2010-09-09

Parameters:

# vpc ID
  CustomerVPCId:
    Type: String
    Description: 'Enter the VPC Id to create resources in.'
# Private subnets to host resources
  PrivateSubnetId1:
    Type: String
    Description: 'Enter the first private subnet Id'
  PrivateSubnetId2:
    Type: String
    Description: 'Enter the second private subnet Id'
# SF IAM Prinicpal ARN
  SFSrcArn:
    Type: String
    Description: Enter the Salesforce IAM ARN.
# 
#

Resources:

  #VPC endpoint service permissions
  SFPrvConnectVPCEPerms:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties: 
      AllowedPrincipals: 
      - !Ref SFSrcArn
      ServiceId: !Ref SFPrvConnectVPCE
    DependsOn: SFPrvConnectVPCE

  #SecurityGroup-ingress rules
  SFPrvConnectALBSecGrpIngressRules:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SFPrvConnectALBSecGrp
      CidrIp: '0.0.0.0/0'
      Description: 'Allow inbound http traffic from IP any'
      FromPort: 80
      IpProtocol: 'tcp'
      ToPort: 80
    DependsOn: SFPrvConnectALBSecGrp

  #SecurityGroup-egress rules
  SFPrvConnectALBSecGrpEgressRules:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SFPrvConnectALBSecGrp
      CidrIp: '0.0.0.0/0'
      Description: 'Allows all outbound traffic'
      FromPort: 1
      IpProtocol: '-1'
      ToPort: 65535
    DependsOn: SFPrvConnectALBSecGrp


  #SecurityGroup-for ALB
  SFPrvConnectALBSecGrp:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 'SG attached to private connect ALB. allows http traffic.'
      GroupName: 'prvConnect-alb-sg'
      VpcId: 
        !Ref CustomerVPCId

  # IAM Role for lambda
#  SFPrvConnectLambdaRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - 'sts:AssumeRole'
#      Description: 'SF PrivateConnect Demo lambda func exec role.'
#      ManagedPolicyArns:
#        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
#      RoleName: role-SFPrvConnectLambdaRole

  #LambdaFunction
  SFPrvConnectLambdaFx:
    Type: AWS::Lambda::Function
    Properties: 
      Architectures: 
        - 'x86_64'
      Code: 
        ZipFile: |
          import random
          def handler(event, context):
            randomNum = random.random()
            return {
                  "statusCode": 200,
                  "headers": {
                      "Content-Type": "application/json"
                  },
                  "randomNumber": randomNum
                  }
      Description: 'SF PrivateConnect demo lambda function'
      FunctionName: 'SFPrvConnectLambdaFx'
      Handler: 'index.handler'
      MemorySize: 128
      PackageType: 'Zip'
      Role: 'arn:aws:iam::169032905892:role/LambdaTestRole'
      # Role: !GetAtt SFPrvConnectLambdaRole.Arn skipping this Role, using an existing one
      Runtime: 'python3.9'
      Timeout: 30
    DependsOn: SFPrvConnectLambdaRole

  # Before you register a Lambda function as a target, you must create a 
  # AWS::Lambda::Permission resource that grants the Elastic Load Balancing
  # service principal permission to invoke the Lambda function.

  #LambdaPermissions
  SFPrvConnectLambdaPerms:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt SFPrvConnectLambdaFx.Arn
      Principal: 'elasticloadbalancing.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
    DependsOn: SFPrvConnectALBTgtGrp

  #ALB listener on port 80 forwarding to ALB target grp
  SFPrvConnectALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref SFPrvConnectALBTgtGrp
          Type: 'forward'
      LoadBalancerArn: !Ref SFPrvConnectLambdaALB
      Port: 80
      Protocol: 'HTTP'
    DependsOn: SFPrvConnectALBTgtGrp

  #NLB listener on port 80 forwarding to NLB target grp
  SFPrvConnectNLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref SFPrvConnectNLBTgtGrp
          Type: 'forward'
      LoadBalancerArn: !Ref SFPrvConnectNLB
      Port: 80
      Protocol: 'TCP'
    DependsOn: SFPrvConnectNLBTgtGrp

  #ALB-TargetGroup - routes traffic to Lambda
  SFPrvConnectALBTgtGrp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: 'true'
      IpAddressType: 'ipv4'
      Name: 'SFPrvConnectALBTgtGrp'
      Targets: 
        - Id: !GetAtt SFPrvConnectLambdaFx.Arn
      TargetType: 'lambda'
    DependsOn: SFPrvConnectLambdaALB

  #NLB-TargetGroup - routes traffic to an ALB
  SFPrvConnectNLBTgtGrp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      IpAddressType: 'ipv4'
      Name: 'SFPrvConnectNLBTgtGrp'
      Port: 80
      Protocol: 'TCP'
      Targets: 
        - Id: !Ref SFPrvConnectLambdaALB
          Port: 80
      TargetType: 'alb'
      VpcId: !Ref CustomerVPCId
    DependsOn: SFPrvConnectNLB

  #NLB
  SFPrvConnectNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: 'ipv4'
      LoadBalancerAttributes: 
        - Key: load_balancing.cross_zone.enabled
          Value: 'true'
      Name: 'SFPrivateConnect-demo-nlb'
      Scheme: 'internal'
      Subnets: 
        - !Ref PrivateSubnetId1
        - !Ref PrivateSubnetId2
      Type: 'network'


  #ALB-Lambda
  SFPrvConnectLambdaALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: 'ipv4'
      SecurityGroups:
        - Fn::GetAtt: SFPrvConnectALBSecGrp.GroupId
      Name: 'SFPrivateConnect-demo-alb'
      Scheme: 'internal'
      Subnets: 
        - !Ref PrivateSubnetId1
        - !Ref PrivateSubnetId2
      Type: 'application'
    DependsOn: SFPrvConnectALBSecGrp


  #VPC-Endpoint
  SFPrvConnectVPCE:
    Type: AWS::EC2::VPCEndpointService
    Properties: 
      AcceptanceRequired: 'false'
      NetworkLoadBalancerArns: 
        - !Ref SFPrvConnectNLB
    DependsOn: SFPrvConnectNLB



Outputs:

  SFVPCEndpointID: 
    Description: "The privateLink VPC endpoint service ID"
    Value: !Ref SFPrvConnectVPCE

  SFNLBDNSName:
    Description: 'URL for the Network Load Balancer assigned to the VPC endpoint.'
    Value: !GetAtt SFPrvConnectNLB.DNSName

